import subprocess
import pytest

def run_test(input_data, expected_output):
    result = subprocess.run(
        ['python3', 'mergesort.py'] + input_data.split(), stdout=subprocess.PIPE
    )
    assert result.stdout.decode('utf-8').strip() == expected_output

# ---------- VALID TEST CASES ----------

# Random Data: Test with typical, arbitrary values (e.g. [5, 2, 2, 10, 6])
@pytest.mark.Valid
@pytest.mark.Harir
def test_mergesort_random_data():
    input_data = "3 1 5 8 2 5 1 3"
    expected_output = "Sorted list: [1, 1, 2, 3, 3, 5, 5, 8]"
    run_test(input_data, expected_output)

# Sorted Data: Test with elements that are already sorted (e.g. [1, 2, 6, 7, 9])
@pytest.mark.Valid
@pytest.mark.Harir
def test_mergesort_sorted_data():
    input_data = "1 2 6 7 9"
    expected_output = "Sorted list: [1, 2, 6, 7, 9]"
    run_test(input_data, expected_output)

# Reverse Sorted Data: Test with elements sorted in descending order (e.g. [10, 9, 6, 4,1])
@pytest.mark.Valid
@pytest.mark.Harir
def test_mergesort_reverse_sorted_data():
    input_data = "5 3 2 1 0"
    expected_output = "Sorted list: [0, 1, 2, 3, 5]"
    run_test(input_data, expected_output)

# Even Number of Elements: Test with (relatively large) lists containing an
# even number of elements (e.g.: [1, 5, 2, 3, 6, 4])
@pytest.mark.Valid
@pytest.mark.Harir
def test_mergesort_even_num_elements():
    input_data = "1 5 2 3 6 4"
    expected_output = "Sorted list: [1, 2, 3, 4, 5, 6]"
    run_test(input_data, expected_output)

# Odd Number of Elements: Test with (relatively large) lists containing an
# odd number of elements (e.g.: [1, 5, 2, 3, 6, 4, 7])
@pytest.mark.Valid
@pytest.mark.Harir
def test_mergesort_odd_num_elements():
    input_data = "1 5 2 3 6 4 7"
    expected_output = "Sorted list: [1, 2, 3, 4, 5, 6, 7]"
    run_test(input_data, expected_output)

# Duplicate Data: Test with lists containing duplicate values (e.g. [6, 7, 2, 7, 6])
@pytest.mark.Valid
@pytest.mark.Harir
def test_mergesort_duplicate_data():
    input_data = "6 7 2 7 6"
    expected_output = "Sorted list: [2, 6, 6, 7, 7]"
    run_test(input_data, expected_output)

# Zero Values: Test with lists containing zeros (e.g. [2, 0, 3, 5, 1])
@pytest.mark.Valid
@pytest.mark.Ivan
def test_mergesort_zero_values():
    input_data = "2 0 3 5 1"
    expected_output = "Sorted list: [0, 1, 2, 3, 5]"
    run_test(input_data, expected_output)
    
# Negative Values: Test with lists containing negatives (e.g. [-2, -6, -3, -1, -10])
@pytest.mark.Valid
@pytest.mark.Ivan
def test_mergesort_negative_values():
    input_data = "-2 -6 -3 -1 -10"
    expected_output = "Sorted list: [-10, -6, -3, -2, -1]"
    run_test(input_data, expected_output)

# Negative, Positive, and Zero Values: Test with a list containing negative, positive,
# and zero values (e.g. [-4, -5, 2, 6, 0])
@pytest.mark.Valid
@pytest.mark.Ivan
def test_mergesort_negative_positive_zero_values():
    input_data = "-4 -5 2 6 0"
    expected_output = "Sorted list: [-5, -4, 0, 2, 6]"
    run_test(input_data, expected_output)

# ---------- BOUNDARY TEST CASES ----------

# Large Positive Input Values: Test with lists containing very large positive values
# (e.g. [999999997, 999999998, 999999999]
@pytest.mark.Boundary
@pytest.mark.Ivan
def test_mergesort_large_positive_values():
    input_data = "999999999999999997 999999999999999998 999999999999999999"
    expected_output = "Sorted list: [999999999999999997, 999999999999999998, 999999999999999999]"
    run_test(input_data, expected_output)

# Large Negative Input Values: Test with lists containing very large negative values
# (e.g. [-999999997, -999999998, -999999999]
@pytest.mark.Boundary
@pytest.mark.Ivan
def test_mergesort_large_negative_values():
    input_data = "-999999999999999997 -999999999999999998 -999999999999999999"
    expected_output = "Sorted list: [-999999999999999999, -999999999999999998, -999999999999999997]"
    run_test(input_data, expected_output)

# Single Element: Test with lists containing single element (e.g. [6])
@pytest.mark.Boundary
@pytest.mark.Aasim
def test_mergesort_single_element():
    input_data = "6"
    expected_output = "Sorted list: [6]"
    run_test(input_data, expected_output)

# Two Elements (Smallest Even): Test with lists containing two elements (smallest even) (e.g. [4, 2])
@pytest.mark.Boundary
@pytest.mark.Aasim
def test_mergesort_two_even_elements():
    input_data = "4 2"
    expected_output = "Sorted list: [2, 4]"
    run_test(input_data, expected_output)

# Three Elements (Smallest Odd): Test with lists containing three elements (smallest odd) (e.g. [54, 8, 4])
@pytest.mark.Boundary
@pytest.mark.Aasim
def test_mergesort_three_odd_elements():
    input_data = "54 8 4"
    expected_output = "Sorted list: [4, 8, 54]"
    run_test(input_data, expected_output)

# Homogeneous Data: Test with lists containing homogeneous elements (e.g. [6, 6, 6, 6, 6])
@pytest.mark.Boundary
@pytest.mark.Aasim
def test_mergesort_homogeneous_elements():
    input_data = "6 6 6 6 6"
    expected_output = "Sorted list: [6, 6, 6, 6, 6]"
    run_test(input_data, expected_output)

# Large Input Size: Test with lists containing a large number of elements (e.g. [1, 2 â€¦ 1000])
@pytest.mark.Boundary
@pytest.mark.Aasim
def test_mergesort_large_input_size():
    input_data = "3550 6170 2796 8568 4687 9527 8723 265 3890 8881 5770 7619 7601 8256 4053 5227 8538 4993 6064 5723 9838 8562 4203 1083 1916 3904 7911 8349 7690 1879 1173 1041 4923 671 8362 3532 6858 6399 4170 8358 541 7668 3683 6551 5576 1099 8972 6776 5312 8445 1580 1004 9597 261 2228 9504 9772 593 6811 6270 7009 2429 934 1300 8799 5243 3710 6153 227 9630 9006 22 9651 5037 1772 1034 2715 435 2704 856 7199 1146 2349 175 9595 5858 3613 8658 1526 1912 4572 7668 7079 7251 1862 5465 2037 2416 4095 3531 9927 9151 4727 7081 8163 8433 1815 854 7550 8179 13 4772 8275 8783 8204 7636 6215 8107 780 865 7582 1427 2066 4760 3709 8573 6979 2582 6745 6025 1713 391 430 6486 9325 4149 4536 7505 5379 1807 7116 2942 1203 4358 3388 845 1192 9750 2212 128 8068 8103 5460 4407 3808 5948 5400 9895 5871 903 8656 2942 4655 7052 6252 2333 9918 8485 2081 8660 1063 9383 6320 8110 7533 2535 5729 1679 449 1014 2671 7528 1276 8066 1154 7562 3818 9917 3184 2931 2389 7029 8283 4108 900 5783 8884 8564 6129 7440 1720 9093 8485 9085 7908 6930 1877 126 3491 5833 3985 6942 7977 6191 3292 2192 2822 3825 486 8947 6946 1890 7336 2107 555 7110 6016 4462 6437 9122 9778 2981 2294 9252 5031 8567 9389 2083 9400 7725 339 5208 5233 9081 636 7113 7187 5802 9027 2766 2626 947 281 8267 975 7094 3928 8740 7299 3424 7519 6554 6731 3020 967 1120 826 2418 8191 7604 6379 7441 4817 259 2534 8963 8225 8947 9503 254 229 6162 7521 125 9323 3415 9673 4013 3770 2945 1622 9576 3331 4607 891 7085 1356 6878 8840 6649 775 3903 1041 2424 8157 5718 8095 8292 2187 1167 6698 6513 1230 7542 2917 8670 5029 7266 7498 9164 2396 3697 1562 4264 2648 1148 7897 5439 1909 5181 3425 2930 9203 4569 3624 1684 6905 6556 81 4750 8842 9100 6782 280 2193 4 1896 181 5702 1500 2531 6973 6871 4453 2899 5665 4967 4529 8645 6591 5651 5301 7197 1021 8876 8055 7501 8235 1138 4587 3947 7678 425 9888 374 8600 9352 8663 439 8786 6675 2941 2567 8012 3241 9661 8117 3373 116 6501 2465 6103 764 3212 7630 6374 5737 2442 6176 7939 5488 1466 929 9532 5580 4195 2059 9264 8734 2379 9772 465 3991 8541 4645 6877 2710 4942 9754 6165 4028 3123 49 8507 431 4456 3489 1269 6733 5667 4857 8552 4763 3367 1466 8145 2453 8964 9345 4469 2492 7538 9142 9320 767 8410 1696 95 4972 6406 5345 2725 9730 3629 9763 2350 9735 2098 6819 7607 9031 4122 210 1477 2842 4841 6915 1905 5332 7348 9540 1339 4996 1481 807 1175 6048 7166 5760 6637 9682 5018 1561 6499 4046 3936 3860 3606 7575 4668 1699 9006 6823 2205 337 4303 9087 3185 3233 2339 6874 7711 5898 1350 2399 3554 5732 8366 8732 8125 3758 3606 2236 6769 9444 84 9272 9094 415 3630 2115 1041 5946 7789 6539 2505 9409 5503 961 2770 9672 21 7564 8378 9922 4787 8155 3634 6580 9113 8053 5523 347 6966 5135 2537 6867 4912 1678 759 5009 8565 9384 6131 4060 2717 7313 665 3467 385 8803 3469 1292 5621 2827 2489 9015 4938 106 2032 425 9988 5987 8979 5351 59 6607 3894 1859 7090 3945 408 1664 3674 7475 8349 4599 1252 3148 56 2651 7483 7557 2261 8585 7515 9450 3908 4335 5724 3507 3799 1222 3139 8615 5537 685 505 3684 2980 2664 6091 6114 8424 3692 1404 6371 4454 3290 9832 5653 724 5341 4552 9310 3388 9741 3432 7204 4307 1765 7922 7691 134 9201 5937 5562 7531 7206 832 4121 1437 7036 7181 8987 1318 2287 3172 4294 2855 8976 7135 1028 1737 9127 4110 5076 3830 3055 9621 6589 8859 9158 4444 2208 5315 3421 3469 5522 150 4742 8473 184 5238 72 7334 8929 5925 6224 5362 4276 1697 5369 8458 4605 8292 2499 2125 2934 8124 2850 1266 8816 7579 9947 1443 6352 8984 4718 4943 9285 5324 5951 8354 8810 4204 5691 7263 8683 842 1192 7824 2214 7770 1383 9123 5454 6414 2448 7518 7854 3663 363 620 8889 8143 8380 1851 4971 2422 7843 958 9509 3247 330 6638 7902 8295 8091 7899 4995 289 7749 1496 4575 1178 1691 5491 681 7403 2870 819 9982 8388 7649 7329 8405 4414 1616 8810 7779 993 3005 6744 7575 5267 5521 9042 652 1794 9560 2170 770 1484 3015 2440 7451 331 9332 8398 4296 8961 4234 9911 2531 4931 1007 7543 5791 5829 3874 8765 1005 5515 9542 4805 8026 2943 6320 4010 6979 2207 4980 6491 2066 8783 1528 5620 5522 1165 8460 3529 5084 6897 1605 5592 4022 8643 9 7284 916 3770 4410 3811 7203 7607 7281 1953 6159 6785 8626 5144 5228 4960 8135 8156 5108 1936 9709 6868 1851 1348 3665 9973 9520 3360 6059 1976 7732 6542 4084 4280 7538 2094 8699 4500 7096 2257 5768 7420 3059 6343 1501 7833 3797 8231 2775 2930 1505 4994 7003 5240 5662 4359 4639 10000 2449 5956 7957 4567 3076 5723 1491 100 4528 4628 4190 3189 3949 6715 8808 5738 464 4459 2772 27 107 4029 3950 90 3873 4393 8664 9734 6497 7174 1618 1216 9713 3778 2780 5316 1234 2048 6026 8166 3697 4119 1793 2420 6342 4603 672 6665 9934 2072 5537 9195 3541 3708 9158 5513 137 7192 1814 4567 1261 8526 656 9039 7402 7514 85 7341 6892 4423 955 2125 7892 4401 2923 9342 8304 4525 9645 943 2254 944 3839 1041 1016 8496 1990 3623 9354 6157 8483 4024 1869 612 239 8529 4268 1727 1647 4616 4056 6489 3284 6709 4102 8091 1499 8393 3838 85 2813 9307 7047 2661 7966 3390 2539 3714 2084 5074 4017 9516 6519 3553"
    expected_output = "Sorted list: [4, 9, 13, 21, 22, 27, 49, 56, 59, 72, 81, 84, 85, 85, 90, 95, 100, 106, 107, 116, 125, 126, 128, 134, 137, 150, 175, 181, 184, 210, 227, 229, 239, 254, 259, 261, 265, 280, 281, 289, 330, 331, 337, 339, 347, 363, 374, 385, 391, 408, 415, 425, 425, 430, 431, 435, 439, 449, 464, 465, 486, 505, 541, 555, 593, 612, 620, 636, 652, 656, 665, 671, 672, 681, 685, 724, 759, 764, 767, 770, 775, 780, 807, 819, 826, 832, 842, 845, 854, 856, 865, 891, 900, 903, 916, 929, 934, 943, 944, 947, 955, 958, 961, 967, 975, 993, 1004, 1005, 1007, 1014, 1016, 1021, 1028, 1034, 1041, 1041, 1041, 1041, 1063, 1083, 1099, 1120, 1138, 1146, 1148, 1154, 1165, 1167, 1173, 1175, 1178, 1192, 1192, 1203, 1216, 1222, 1230, 1234, 1252, 1261, 1266, 1269, 1276, 1292, 1300, 1318, 1339, 1348, 1350, 1356, 1383, 1404, 1427, 1437, 1443, 1466, 1466, 1477, 1481, 1484, 1491, 1496, 1499, 1500, 1501, 1505, 1526, 1528, 1561, 1562, 1580, 1605, 1616, 1618, 1622, 1647, 1664, 1678, 1679, 1684, 1691, 1696, 1697, 1699, 1713, 1720, 1727, 1737, 1765, 1772, 1793, 1794, 1807, 1814, 1815, 1851, 1851, 1859, 1862, 1869, 1877, 1879, 1890, 1896, 1905, 1909, 1912, 1916, 1936, 1953, 1976, 1990, 2032, 2037, 2048, 2059, 2066, 2066, 2072, 2081, 2083, 2084, 2094, 2098, 2107, 2115, 2125, 2125, 2170, 2187, 2192, 2193, 2205, 2207, 2208, 2212, 2214, 2228, 2236, 2254, 2257, 2261, 2287, 2294, 2333, 2339, 2349, 2350, 2379, 2389, 2396, 2399, 2416, 2418, 2420, 2422, 2424, 2429, 2440, 2442, 2448, 2449, 2453, 2465, 2489, 2492, 2499, 2505, 2531, 2531, 2534, 2535, 2537, 2539, 2567, 2582, 2626, 2648, 2651, 2661, 2664, 2671, 2704, 2710, 2715, 2717, 2725, 2766, 2770, 2772, 2775, 2780, 2796, 2813, 2822, 2827, 2842, 2850, 2855, 2870, 2899, 2917, 2923, 2930, 2930, 2931, 2934, 2941, 2942, 2942, 2943, 2945, 2980, 2981, 3005, 3015, 3020, 3055, 3059, 3076, 3123, 3139, 3148, 3172, 3184, 3185, 3189, 3212, 3233, 3241, 3247, 3284, 3290, 3292, 3331, 3360, 3367, 3373, 3388, 3388, 3390, 3415, 3421, 3424, 3425, 3432, 3467, 3469, 3469, 3489, 3491, 3507, 3529, 3531, 3532, 3541, 3550, 3553, 3554, 3606, 3606, 3613, 3623, 3624, 3629, 3630, 3634, 3663, 3665, 3674, 3683, 3684, 3692, 3697, 3697, 3708, 3709, 3710, 3714, 3758, 3770, 3770, 3778, 3797, 3799, 3808, 3811, 3818, 3825, 3830, 3838, 3839, 3860, 3873, 3874, 3890, 3894, 3903, 3904, 3908, 3928, 3936, 3945, 3947, 3949, 3950, 3985, 3991, 4010, 4013, 4017, 4022, 4024, 4028, 4029, 4046, 4053, 4056, 4060, 4084, 4095, 4102, 4108, 4110, 4119, 4121, 4122, 4149, 4170, 4190, 4195, 4203, 4204, 4234, 4264, 4268, 4276, 4280, 4294, 4296, 4303, 4307, 4335, 4358, 4359, 4393, 4401, 4407, 4410, 4414, 4423, 4444, 4453, 4454, 4456, 4459, 4462, 4469, 4500, 4525, 4528, 4529, 4536, 4552, 4567, 4567, 4569, 4572, 4575, 4587, 4599, 4603, 4605, 4607, 4616, 4628, 4639, 4645, 4655, 4668, 4687, 4718, 4727, 4742, 4750, 4760, 4763, 4772, 4787, 4805, 4817, 4841, 4857, 4912, 4923, 4931, 4938, 4942, 4943, 4960, 4967, 4971, 4972, 4980, 4993, 4994, 4995, 4996, 5009, 5018, 5029, 5031, 5037, 5074, 5076, 5084, 5108, 5135, 5144, 5181, 5208, 5227, 5228, 5233, 5238, 5240, 5243, 5267, 5301, 5312, 5315, 5316, 5324, 5332, 5341, 5345, 5351, 5362, 5369, 5379, 5400, 5439, 5454, 5460, 5465, 5488, 5491, 5503, 5513, 5515, 5521, 5522, 5522, 5523, 5537, 5537, 5562, 5576, 5580, 5592, 5620, 5621, 5651, 5653, 5662, 5665, 5667, 5691, 5702, 5718, 5723, 5723, 5724, 5729, 5732, 5737, 5738, 5760, 5768, 5770, 5783, 5791, 5802, 5829, 5833, 5858, 5871, 5898, 5925, 5937, 5946, 5948, 5951, 5956, 5987, 6016, 6025, 6026, 6048, 6059, 6064, 6091, 6103, 6114, 6129, 6131, 6153, 6157, 6159, 6162, 6165, 6170, 6176, 6191, 6215, 6224, 6252, 6270, 6320, 6320, 6342, 6343, 6352, 6371, 6374, 6379, 6399, 6406, 6414, 6437, 6486, 6489, 6491, 6497, 6499, 6501, 6513, 6519, 6539, 6542, 6551, 6554, 6556, 6580, 6589, 6591, 6607, 6637, 6638, 6649, 6665, 6675, 6698, 6709, 6715, 6731, 6733, 6744, 6745, 6769, 6776, 6782, 6785, 6811, 6819, 6823, 6858, 6867, 6868, 6871, 6874, 6877, 6878, 6892, 6897, 6905, 6915, 6930, 6942, 6946, 6966, 6973, 6979, 6979, 7003, 7009, 7029, 7036, 7047, 7052, 7079, 7081, 7085, 7090, 7094, 7096, 7110, 7113, 7116, 7135, 7166, 7174, 7181, 7187, 7192, 7197, 7199, 7203, 7204, 7206, 7251, 7263, 7266, 7281, 7284, 7299, 7313, 7329, 7334, 7336, 7341, 7348, 7402, 7403, 7420, 7440, 7441, 7451, 7475, 7483, 7498, 7501, 7505, 7514, 7515, 7518, 7519, 7521, 7528, 7531, 7533, 7538, 7538, 7542, 7543, 7550, 7557, 7562, 7564, 7575, 7575, 7579, 7582, 7601, 7604, 7607, 7607, 7619, 7630, 7636, 7649, 7668, 7668, 7678, 7690, 7691, 7711, 7725, 7732, 7749, 7770, 7779, 7789, 7824, 7833, 7843, 7854, 7892, 7897, 7899, 7902, 7908, 7911, 7922, 7939, 7957, 7966, 7977, 8012, 8026, 8053, 8055, 8066, 8068, 8091, 8091, 8095, 8103, 8107, 8110, 8117, 8124, 8125, 8135, 8143, 8145, 8155, 8156, 8157, 8163, 8166, 8179, 8191, 8204, 8225, 8231, 8235, 8256, 8267, 8275, 8283, 8292, 8292, 8295, 8304, 8349, 8349, 8354, 8358, 8362, 8366, 8378, 8380, 8388, 8393, 8398, 8405, 8410, 8424, 8433, 8445, 8458, 8460, 8473, 8483, 8485, 8485, 8496, 8507, 8526, 8529, 8538, 8541, 8552, 8562, 8564, 8565, 8567, 8568, 8573, 8585, 8600, 8615, 8626, 8643, 8645, 8656, 8658, 8660, 8663, 8664, 8670, 8683, 8699, 8723, 8732, 8734, 8740, 8765, 8783, 8783, 8786, 8799, 8803, 8808, 8810, 8810, 8816, 8840, 8842, 8859, 8876, 8881, 8884, 8889, 8929, 8947, 8947, 8961, 8963, 8964, 8972, 8976, 8979, 8984, 8987, 9006, 9006, 9015, 9027, 9031, 9039, 9042, 9081, 9085, 9087, 9093, 9094, 9100, 9113, 9122, 9123, 9127, 9142, 9151, 9158, 9158, 9164, 9195, 9201, 9203, 9252, 9264, 9272, 9285, 9307, 9310, 9320, 9323, 9325, 9332, 9342, 9345, 9352, 9354, 9383, 9384, 9389, 9400, 9409, 9444, 9450, 9503, 9504, 9509, 9516, 9520, 9527, 9532, 9540, 9542, 9560, 9576, 9595, 9597, 9621, 9630, 9645, 9651, 9661, 9672, 9673, 9682, 9709, 9713, 9730, 9734, 9735, 9741, 9750, 9754, 9763, 9772, 9772, 9778, 9832, 9838, 9888, 9895, 9911, 9917, 9918, 9922, 9927, 9934, 9947, 9973, 9982, 9988, 10000]"
    run_test(input_data, expected_output)

# ---------- INVALID TEST CASES ----------

# No Arguments: Test by passing in no arguments
@pytest.mark.Invalid
@pytest.mark.Rehan
def test_mergesort_no_arguments():
    input_data = ""
    expected_output = "Usage: python merge_sort.py <space-separated list of numbers>"
    run_test(input_data, expected_output)

# String Values: Test with lists containing strings (e.g. [test, zesty, cat])
@pytest.mark.Invalid
@pytest.mark.Rehan
def test_mergesort_string_values():
    input_data = "boii wha da heeeee"
    expected_output = "Usage: python merge_sort.py <space-separated list of numbers>"
    run_test(input_data, expected_output)

# Decimal Values: Test with lists containing decimals (e.g. [2.21, 6.61, 10.01])
@pytest.mark.Invalid
@pytest.mark.Rehan
def test_mergesort_decimal_values():
    input_data = "3.142 0.55 1.12 0.69"
    expected_output = "Usage: python merge_sort.py <space-separated list of numbers>"
    run_test(input_data, expected_output)

# Some Invalid Values: Test with a list containing some valid inputs and some different
# types of invalid values (e.g. 5, 43fg3rgf, 3.1422354, 5)
@pytest.mark.Invalid
@pytest.mark.Rehan
def test_mergesort_some_invalid_values():
    input_data = "boii 5 da 3.74 34"
    expected_output = "Usage: python merge_sort.py <space-separated list of numbers>"
    run_test(input_data, expected_output)

# Values with Whitespace: Test with different types of whitespace
# (e.g. [2  , 3, 2\t, 1, 5\n, 2])
@pytest.mark.Invalid
@pytest.mark.Rehan
def test_mergesort_whitespace():
    input_data = "3 12   6\n 1\t5"
    expected_output = "Sorted list: [1, 3, 5, 6, 12]"
    run_test(input_data, expected_output)

# Values Containing Separators: Test using a value containing comma separators (e.g: [2,3,67,87])
@pytest.mark.Invalid
@pytest.mark.Rehan
def test_mergesort_seperators():
    input_data = "6,23,7,1"
    expected_output = "Usage: python merge_sort.py <space-separated list of numbers>"
    run_test(input_data, expected_output)
